<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ksdshpx.mybatis.mapper.EmployeeMapperDynamicSQL">
    <!--
        查询员工：携带了哪个字段，查询条件就带上这个字段的值
        public List<Employee> getEmpsByConditionIf(Employee employee);
    -->
    <select id="getEmpsByConditionIf" resultType="cn.ksdshpx.mybatis.beans.Employee">
        SELECT *
        FROM tbl_employee
        <!--
            查询的时候如果某个条件没带，可能会sql拼装有问题
            1.给where后面加上1=1，以后的条件都and xxx
            2.MyBatis使用where标签来将所有的查询条件包括在内。where只会去掉第一个多出来的and或or
        -->
        <where>
            <!--
              test:判断表达式（OGNL）,从参数中取值进行判断
            -->
            <if test="id!=null">
                id = #{id}
            </if>
            <if test="lastName != null &amp;&amp; lastName != &quot;&quot;">
                AND last_name LIKE #{lastName}
            </if>
            <if test="email != null and email.trim() != ''">
                AND email = #{email}
            </if>
            <!--ognl会进行字符串和数字的转换判断 "0"==0 -->
            <if test="gender == 0 or gender == 1">
                AND gender = #{gender}
            </if>
        </where>
    </select>

    <!--public List<Employee> getEmpsByConditionTrim(Employee employee);-->
    <select id="getEmpsByConditionTrim" resultType="cn.ksdshpx.mybatis.beans.Employee">
        SELECT *
        FROM tbl_employee
        <!--后面多出的and or where标签不能解决-->
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id = #{id} AND
            </if>
            <if test="lastName != null &amp;&amp; lastName != &quot;&quot;">
                last_name LIKE #{lastName} AND
            </if>
            <if test="email != null and email.trim() != ''">
                email = #{email} AND
            </if>
            <if test="gender == 0 or gender == 1">
                gender = #{gender}
            </if>
        </trim>
    </select>

    <!--public List<Employee> getEmpsByConditionChoose(Employee employee);-->
    <select id="getEmpsByConditionChoose" resultType="cn.ksdshpx.mybatis.beans.Employee">
        select *
        from tbl_employee
        <where>
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="lastName!=null">
                    last_name like #{lastName}
                </when>
                <when test="email!=null">
                    email = #{email}
                </when>
                <otherwise>
                    gender = 0
                </otherwise>
            </choose>
        </where>
    </select>

    <!--public void updateEmp(Employee employoe);-->
    <update id="updateEmp">
        UPDATE tbl_employee
        <set>
            <if test="lastName != null">
                last_name = #{lastName},
            </if>
            <if test="gender != null">
                gender = #{gender},
            </if>
            <if test="email != null">
                email = #{email}
            </if>
        </set>
        <where>
            id = #{id}
        </where>
    </update>

    <!--List<Employee> getEmpsByConditionForeach(List<Integer> ids);-->
    <select id="getEmpsByConditionForeach" resultType="cn.ksdshpx.mybatis.beans.Employee">
        SELECT *
        FROM tbl_employee
        WHERE id IN
        <!--
            collection:指定要遍历的集合
                list类型的参数会特殊处理封装在map中，map的key就是list
            item:将当前遍历出的元素赋值给指定的变量
            separator:每个元素之间的分割符
            open:遍历出所有元素拼接一个开始字符
            close:遍历出所有元素拼接一个结束字符
            index:索引，遍历list时表示索引，item就是value
                       遍历map时表示key，item表示map的value
            #{变量名}就能取出变量的值，也就是当前遍历出的元素
        -->
        <foreach collection="ids" item="item_id" separator="," open="(" close=")">
            #{item_id}
        </foreach>
    </select>

    <!--MySQL下批量保存：MySQL支持values(),(),()这种语法，推荐-->
    <!--public void addEmps(@Param("emps") List<Employee> emps);-->
    <!--
    <insert id="addEmps">
        INSERT INTO tbl_employee(last_name, email, gender, d_id)
        VALUES
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
        </foreach>
    </insert>
    -->
    <!--
        这种方式需要MySQL连接属性allowMultiQueries=true的支持
        这种分号分隔多个sql可以用于其他的批量操作(删除、修改)
    -->
    <insert id="addEmps">
        <foreach collection="emps" item="emp" separator=";">
            INSERT INTO tbl_employee(
               <include refid="insertColumn"></include>
            )
            VALUES (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
        </foreach>
    </insert>

    <!--
        两个内置参数
        不只是方法传递过来的参数可以被用来判断，取值。。。
        MyBatis还有两个默认的内置参数：
        _parameter:代表整个参数
            单个参数:_parameter就是这个参数
            多个参数:参数会被封装成一个map,_parameter就是代表这个map
        _databaseId:如果配置了databaseIdProvider标签。
            _databaseId就是代表当前数据库的别名
    -->
    <!--List<Employee> getEmpsByInnerParamter(Employee employee);-->
    <select id="getEmpsByInnerParamter" resultType="cn.ksdshpx.mybatis.beans.Employee">
        <!--
            bind:可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值
        -->
        <bind name="myLastName" value="'%'+lastName+'%'"/>
        <if test="_databaseId=='mysql'">
            select * from tbl_employee
            <if test="_parameter!=null">
                where last_name like #{myLastName}
            </if>
        </if>
        <if test="_databaseId=='oracle'">
            select * from employees
            <if test="_parameter!=null">
                where last_name like #{lastName}
            </if>
        </if>
    </select>

    <!--
        sql标签:抽取可重用的sql片段，方便后面引用
    -->
    <sql id="insertColumn">
        last_name, email, gender, d_id
    </sql>
</mapper>