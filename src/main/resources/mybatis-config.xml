<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
        1.properties标签：mybatis可以使用properties标签来
          引入外部properties配置文件的内容
          resource:引入类路径下的资源
          url:引入网络路径或者磁盘路径下的资源
    -->
    <properties resource="dbconfig.properties"></properties>
    <!--
        2.settings标签：运行时行为设置
    -->
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>

    <!--
        3.typeAliases标签:别名处理器，可以为java类型取别名（别名不区分大小写）
            type:指定要起别名的类的全类名，默认为类名小写
            alias:指定别名
            package:为某个包下的所有类起别名
                批量起别名的情况下，可以使用@Alias注解为某个类型指定新的别名
    -->
    <typeAliases>
        <typeAlias type="cn.ksdshpx.mybatis.beans.Employee" alias="employee"></typeAlias>
        <!--批量起别名-->
        <package name="cn.ksdshpx.mybatis.beans"/>
    </typeAliases>
    <!--
        4.environments标签：MyBatis可以配置多种环境,default指定使用某种环境,可以快速切换环境
            environment：配置具体的环境信息,必须包含以下两个标签,id标识当前环境的唯一标识
                transactionManager：事务管理器，
                    type:表示事务管理器的类型,JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
                          也可以自定义事务管理器：实现TransactionFactory接口,type就是实现类的全类名
                dataSource:数据源
                    type:数据源类型,UNPOOLED(UnpooledDataSourceFactory)|POOLED(PooledDataSourceFactory)|JNDI(JndiDataSourceFactory)
                          也可以自定义数据源：实现DataSourceFactory接口,type就是实现类的全类名
    -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--
        5.databaseIdProvider:支持多数据库厂商
            type="DB_VENDOR":VendorDatabaseIdProvider,得到数据库厂商的标识(由数据库驱动自带Connection.getMetaData().getDatabaseProductName()),
                             MyBatis根据数据库厂商的标识来执行sql
    -->
    <databaseIdProvider type="DB_VENDOR">
        <!--为不同的数据库厂商起别名-->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>
    <!--
        6.mappers标签：将sql映射文件注册到全局配置文件中
    -->
    <mappers>
        <!--
            mapper:映射一个sql文件
                1.注册配置文件
                    resource:引用类路径下的sql映射文件
                    url:引用网络路径或磁盘路径下的sql映射文件
                2.注册接口
                    class:引用接口
                        1)有sql映射文件，映射文件必须与接口同名同包
                        2)没有sql映射文件，所有的sql都是利用注解写在接口上
                            推荐：比较重要复杂的Dao接口，使用sql映射文件
                                 不重要简单的Dao接口为了开发快速可以使用注解
        -->
        <mapper resource="EmployeeMapper.xml"/>
        <!--
        <mapper class="cn.ksdshpx.mybatis.mapper.EmployeeMapper"/>
        <mapper class="cn.ksdshpx.mybatis.mapper.EmployeeMapperAnnotation"/>
        -->
        <!--
        批量注册:映射文件必须与接口同名同包
        <package name="cn.ksdshpx.mybatis.mapper"/>
        -->
    </mappers>
</configuration>