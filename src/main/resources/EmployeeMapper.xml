<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ksdshpx.mybatis.mapper.EmployeeMapper">
    <!--
        namespace:名称空间,指定为接口的全类名
        id:唯一标识
        resultType:返回值类型
        #{id}:从传递过来的参数中取出id值
    -->
    <select id="selectEmp" resultType="cn.ksdshpx.mybatis.beans.Employee">
        <!--select id,last_name as lastName,gender,email from tbl_employee where id = #{id}-->
        SELECT * FROM tbl_employee WHERE id = #{id}
    </select>

    <!--public Employee getEmpById(Integer id);-->
    <!--
    <select id="getEmpById" resultType="cn.ksdshpx.mybatis.beans.Employee">
        select id,last_name as lastName,gender,email from tbl_employee where id = #{id}
    </select>
    -->
    <select id="getEmpById" resultType="employee" databaseId="mysql">
        SELECT id, last_name AS lastName, gender, email
        FROM tbl_employee
        WHERE id = #{id}
    </select>

    <!--void addEmp(Employee employee);-->
    <!--parameterType可以省略不写-->
    <!--
        mysql支持自增主键，自增主键的获取，mybatis也是利用statement.getGeneratedKeys()
        useGeneratedKeys="true":获取自增主键值策略
        keyProperty:指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给JavaBean的哪个属性
    -->
    <insert id="addEmp" parameterType="cn.ksdshpx.mybatis.beans.Employee" useGeneratedKeys="true" keyProperty="id"
            databaseId="mysql">
        INSERT INTO tbl_employee (last_name, gender, email)
        VALUES (#{lastName}, #{gender}, #{email})
    </insert>

    <!--
        oracle不支持自增，使用序列来模拟自增；
        每次插入的数据的主键是从序列中拿到的值，如何获取这个值
    -->
    <insert id="addEmp" databaseId="oralce">
        <!--
            keyProperty:查出的主键封装给javabean的哪个属性
            order="BEFORE":当前sql在插入sql之前运行
            resultType:查出数据的返回值类型
        -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!--编写查询主键的sql-->
            SELECT employee_seq.nextval from dual
        </selectKey>
        INSERT INTO tbl_employee (id,last_name, gender, email)
        VALUES (#{id},#{lastName}, #{gender}, #{email})
    </insert>

    <!--void updateEmp(Employee employee);-->
    <update id="updateEmp">
        UPDATE tbl_employee
        SET last_name = #{lastName},
            gender    = #{gender},
            email     = #{email}
        WHERE id = #{id}
    </update>
    <!--void deleteEmpById(Integer id);-->
    <delete id="deleteEmpById">
        DELETE
        FROM tbl_employee
        WHERE id = #{id}
    </delete>
    <!--
        MyBatis参数处理：
            1.单个参数：mybatis不会做特殊处理
                #{参数名}，取出参数值
                特别注意，如果是Collection(List或Set)或数组类型，也会做特殊处理，
                将传入的集合或数组封装到Map中。
                key:Collection为collection,List为list,数组为array


            2.多个参数：mybatis会做特殊处理
                #{param1}..#{paramN}或#{arg0}..#{argn}
                多个参数会被封装成一个map(key为param1..paramN或参数的索引也可以,value为传入的参数值),#{}就是从map中获取指定的key值

            3.命名参数：明确指定封装参数时map的key
                 #{指定的key}
                 key:使用@Param注解指定的值
                 value:参数的值

            4.POJO:#{属性名}
                如果多个参数正好是业务逻辑的数据模型，我们可以直接传入POJO

            5.Map:#{key}
                如果多个参数不是业务逻辑的数据模型，没有对应的POJO，不经常使用，我们可以传入一个Map

            6.TO
                如果多个参数不是业务逻辑的数据模型，但是经常要使用，推荐来编写一个数据传输对象TO(Transfer Object)
    -->
    <!--Employee getEmpByIdAndLastName(Integer id,String lastName);-->
    <select id="getEmpByIdAndLastName" resultType="cn.ksdshpx.mybatis.beans.Employee">
        <!--select id,last_name as lastName,gender,email from tbl_employee where id = #{param1} and last_name = #{param2}-->
        <!--select id,last_name as lastName,gender,email from tbl_employee where id = #{arg0} and last_name = #{arg1}-->
        SELECT id,last_name AS lastName,gender,email FROM tbl_employee WHERE id = #{id} AND last_name = #{lastName}
    </select>

    <!--Employee getEmpByMap(Map map);-->
    <select id="getEmpByMap" resultType="cn.ksdshpx.mybatis.beans.Employee">
        SELECT id, last_name AS lastName, gender, email
        FROM tbl_employee
        WHERE id = #{id}
          AND last_name = #{lastName}
    </select>

    <!--
        MyBatis怎么处理参数：
            总结：参数多时会封装map,为了不混乱,我们可以使用@Param来指定封装使用的key
                 #{key}就可以取出map中的值
        ParamNameResolver解析参数封装map
        //1.names:{0=id,1=lastName}：构造器的时候就确定好了
            确定流程：
            1.获取每个标了@Param注解的值：id,lastName;赋值给name
            2.每次解析一个参数给map中保存信息（key:参数索引，value:name的值）
                name的值：
                    标注了@Param注解：注解的值
                    没有标注：
                        1.全局配置了useActualParamName（jdk1.8）:name=参数名
                        2.name=map.size(),相当于当前元素的索引
            args[1,"hotcat"]
        public Object getNamedParams(Object[] args) {
            final int paramCount = names.size();
                //1.如果args为null,返回null
                if (args == null || paramCount == 0) {
                  return null;
                  //2.如果只有一个元素，并且没有Param注解；args[0]:单元素直接返回
                } else if (!hasParamAnnotation && paramCount == 1) {
                  return args[names.firstKey()];
                  //3.多个元素或者是有Param标注
                } else {
                  final Map<String, Object> param = new ParamMap<>();
                  int i = 0;
                  //4.遍历names集合{0=id,1=lastName}
                  for (Map.Entry<Integer, String> entry : names.entrySet()) {
                    //names集合的value作为key,names集合的key又作为取值的参考args[0]、args[1]
                    //{id=1,lastName="hotcat"}
                    param.put(entry.getValue(), args[entry.getKey()]);
                    // add generic param names (param1, param2, ...)
                    //额外的将每一个参数也保存到map中，使用新的key:param1...paramN
                    //效果：有注解可以#{指定的key},或者#{Param1}
                    final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);
                    // ensure not to overwrite parameter named with @Param
                    if (!names.containsValue(genericParamName)) {
                      param.put(genericParamName, args[entry.getKey()]);
                    }
                    i++;
                  }
                  return param;
                }
          }

    -->
    <!--
        参数值的获取：
            #{}：可以获取map中的值或者POJO对象属性的值
            ${}：可以获取map中的值或者POJO对象属性的值
                区别：#{}以预编译的形式将参数设置到sql语句中;PreparedStatement;防止sql注入
                     ${}取出的值直接拼装在sql语句中;会有sql注入问题

                结论：大多情况下取参数的值都应该使用#{}
                     对于原生jdbc不支持占位符的地方，就可以使用${}进行取值
                     比如分表、排序;按照年份分表拆分
                        select * from ${year}_salary where xxx;
                        select * from tbl_employee order by ${f_name} ${order}

        #{}:更丰富的用法
            规定参数的一些规则
            javaType、jdbcType、mode（存储过程）、numericScale、
            resultMap、typeHandler、jdbcTypeName、expression（未来准备支持的功能）

            jdbcType：通常在某种特定的条件下需要被设置
                在数据为null的时候，有些数据库不能识别MyBatis对null的默认处理，比如Oracle(报错)
                JdbcType OTHER:无效的类型，因为MyBatis对所有的null都映射的原生Jdbc的OTHER类型，oracle不能正确识别

                由于全局配置中：jdbcTypeForNull=OTHER,oracle不支持
                解决：1、#{字段,jdbcType=NULL}
                     2、jdbcTypeForNull=NULL
    -->

    <!--List<Employee> getEmpsByLastNameLike(String lastName);-->
    <!--
        resultType:如果返回的是一个集合，要写集合中元素的类型
    -->
    <select id="getEmpsByLastNameLike" resultType="Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>
</mapper>